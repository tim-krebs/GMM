#include <iostream>
#include <chrono>
#include <sstream>
#include <fstream>
#include <algorithm>
#include "MFCC.hpp"
#include "GMM.hpp"
#include "DataHandler.hpp"

#define FREQ        16000               //You can try 48000 to use 48000Hz wav files, but it's more slow.
#define TRAINSIZE   FREQ*5              //4 secondes of voice for trainning
                                        // --- you can increase this value to improve the recognition rate
#define RECOGSIZE   FREQ*4              //1 seconde of voice for recognition
                                        // --- you can increase this value to improve the recognition rate


#define NUM_WORDS   1

typedef std::chrono::high_resolution_clock Clock;
typedef std::chrono::milliseconds Milliseconds;

const double MFCC::PI  = 3.14159265358979323846;
const double MFCC::PI2 = 2*PI;
const double MFCC::PI4 = 4*PI;


std::string GetWord(std::string name)
{
    if(name == "Word0") return "Null";
    if(name == "Word1") return "Eins";
    if(name == "Word2") return "Zwei";
    if(name == "Word3") return "Drei";
    if(name == "Word4") return "Vier";

    return "Silence";
}



int main()
{
   	Clock::time_point trainStart, trainEnd, recogScoreStart, recogScoreEnd, recogPercentStart, recogPercentEnd;
    Milliseconds ms;
    DataHandler datahandler;


	std::string filePath;
	size_t realSize;
    short int bigVoiceBuffer[TRAINSIZE];
    short int littleVoiceBuffer[2000];
	size_t frameCount;
    std::vector<std::vector<double> > melCepData;
    int loop;
    std::string name;
    int goodScoreRecog = 0;
    int goodPercentRecog = 0;
    std::map<std::string, int> recogHits;


    MFCC mfcc(16000, 8, 2, MFCC::Hamming, 24, 36);
    GMM gmm;

    /***************************************************************************
     * TRAINNING *
    ***************************************************************************/
    std::cout << "*** TRAINNING ***" << std::endl;
    trainStart = Clock::now();
    for(int wordId=0; wordId<=NUM_WORDS; wordId++)
    {
        //** Load wav file
        std::string path = "/Users/timkrebs/OneDrive/Uni/8.Semester/Bachelorarbeit/02_Programme/C++/SpeechRecognition/";
        filePath = datahandler.GetFilePath(wordId, 0, 1, "wav");

        filePath = path.append(filePath);

        std::cout << filePath;
        realSize = datahandler.ReadWav(filePath, bigVoiceBuffer, TRAINSIZE, 0);
        if(realSize<1) continue;


        //** Mfcc analyse WITH BIG BUFFER
        frameCount = mfcc.Analyse(bigVoiceBuffer,realSize);
        melCepData = mfcc.GetMFCCData();

        filePath.erase();
        path = "/Users/timkrebs/OneDrive/Uni/8.Semester/Bachelorarbeit/02_Programme/C++/SpeechRecognition/";

        //** Gmm trainning
        loop = gmm.Trainning(melCepData, frameCount);
        filePath = datahandler.GetFilePath(wordId, 0, 2, "gmm");

        filePath = path.append(filePath);


        gmm.SaveModel(filePath);
        std::cout << " : " << loop << " trainning loops" << std::endl;
        
        filePath.erase();

    }
    trainEnd = Clock::now();

    //** Reload saved models
    for(int wordId=0; wordId<=NUM_WORDS; wordId++)
    {
        std::string path = "/Users/timkrebs/OneDrive/Uni/8.Semester/Bachelorarbeit/02_Programme/C++/SpeechRecognition/";
        filePath = datahandler.GetFilePath(wordId, 0, 2, "gmm");

        filePath = path.append(filePath);

        gmm.AddModel(filePath, datahandler.GetPersonName(wordId));

        filePath.erase();
    }

    /***************************************************************************
     * RECOGNITION best score *
    ***************************************************************************/
    std::cout << std::endl << "*** RECOGNITION best score ***" << std::endl;
    recogScoreStart = Clock::now();
    for(int wordId=0; wordId<=NUM_WORDS; wordId++)
    {
        for(int num=1; num<=3; num++)
        {
            std::string path = "/Users/timkrebs/OneDrive/Uni/8.Semester/Bachelorarbeit/02_Programme/C++/SpeechRecognition/";

            //** Mfcc analyse WITH BIG BUFFER
            filePath = datahandler.GetFilePath(wordId, num, 0, "wav");

            filePath = path.append(filePath);

            std::cout << filePath;
            realSize = datahandler.ReadWav(filePath, bigVoiceBuffer, RECOGSIZE, 0);
            if(realSize<1) continue;

            frameCount = mfcc.Analyse(bigVoiceBuffer,realSize);
            melCepData = mfcc.GetMFCCData();
            name = gmm.Recogniser(melCepData, frameCount);


            if(name == datahandler.GetPersonName(wordId))
            {
                name = GetWord(name);
                std::cout << " recognize correctly : " << name << std::endl;
                goodScoreRecog++;
            }
            else
            {
                name = GetWord(name);
                std::cout << " recognize wrong: " << name << " !!!" << std::endl;
            }
            filePath.erase();
        }
    }
    recogScoreEnd = Clock::now();
    std::cout << std::endl;


    /***************************************************************************
     * RECOGNITION in % *
    ***************************************************************************/
    std::cout << std::endl << "*** RECOGNITION best percentage ***" << std::endl;
    recogPercentStart = Clock::now();
    for(int wordId=0; wordId<=NUM_WORDS; wordId++)
    {
        for(int num=1; num<=3; num++)
        {
            std::string path = "/Users/timkrebs/OneDrive/Uni/8.Semester/Bachelorarbeit/02_Programme/C++/SpeechRecognition/";

            //** Mfcc analyse WITH LITTLE BUFFER
            bool bContinue = true;
			size_t position = 0;
            mfcc.StartAnalyse(RECOGSIZE);
            filePath = datahandler.GetFilePath(wordId, num, 0, "wav");

            filePath = path.append(filePath);

            std::cout << filePath;
            recogHits.clear();
            do
            {
                realSize = datahandler.ReadWav(filePath, littleVoiceBuffer, 2000, position);
                bContinue = mfcc.AddBuffer(littleVoiceBuffer, realSize);
                position += realSize;
                if(realSize!=2000) bContinue = false;
                if(position>8000)
                {
                    name = gmm.Recogniser(mfcc.GetMFCCData(), mfcc.GetFrameCount());
                    recogHits[name]++;
                }
            } while(bContinue);


            auto it1 = max_element(recogHits.cbegin(), recogHits.cend(), [](const std::pair<std::string, int>& p1, const std::pair<std::string, int>& p2) { return p1.second < p2.second; });
            name = it1->first;
            int score = it1->second;
            recogHits[name] = 0; //To find the second
            it1 = max_element(recogHits.cbegin(), recogHits.cend(), [](const std::pair<std::string, int>& p1, const std::pair<std::string, int>& p2) { return p1.second < p2.second; });

            std::cout << " " << name << " " << score*100/(score+it1->second) << "%";

            if(name == datahandler.GetPersonName(wordId))
            {
                name = GetWord(name);
                std::cout << " correctly : " << name << std::endl;
                goodPercentRecog++;
            }
            else
            {
                name = GetWord(name);
                std::cout << " wrong : " << name << std::endl;
            }

            filePath.erase();
        }
    }
    recogPercentEnd = Clock::now();
    std::cout << std::endl;

    std::cout << "Recognition by score rate " << goodScoreRecog*100/30 << "%" << std::endl;
    std::cout << "Recognition by % rate " << goodPercentRecog*100/30 << "%" << std::endl;
    ms = std::chrono::duration_cast<Milliseconds>(trainEnd - trainStart);
   	std::cout << "Training time " << ms.count() << " ms (" << ms.count()/8 << " by train)" << std::endl;
    ms = std::chrono::duration_cast<Milliseconds>(recogScoreEnd - recogScoreStart);
	std::cout << "Recognition by score time " << ms.count() << " ms (" << ms.count()/24 << " by recog)" << std::endl;
    ms = std::chrono::duration_cast<Milliseconds>(recogPercentEnd - recogPercentStart);
	std::cout << "Recognition by % time " << ms.count() << " ms (" << ms.count()/24 << " by recog)" << std::endl;

    return 0;
}